MacVAX ==============================______________________________============================== Assembler/Simulator ==============================______________________________==============================Reference Manual© 1989,1990,1991,1992Department of Computer ScienceUniversity of AucklandPrivate BagAucklandNew ZealandAdditionsIn order to run an operating system on MacVAX a number of changes were made to the version 2.xx code. Multiple symbol tables were introduced for use with multi-tasking, along with new xfc's to manipulate them. An IPR, MVPID, was added to hold the current P0 symbol table id (PID) and the save and load process context instructions altered to save and restore this register on the end of the PCB. An interrupt vector and a pair of IPR's were added to allow users to communicate with the running system via MacVAX's menu's.  IPR MVMEM was added to let a booting system know how much physical memory was available to it. In order to aid a booting process a few extra file handling xfc's were also added and the number of open files allowed increased. The menu bar is no longer dimmed when a process is running and has been rearranged to better suit a multitasking MacVAX.There are also a number of previously undocumented changes to the last documented version (2.0)   A VAX interval clock was added in version 2.32. A new MAC_TIME xfc added in 2.33. Display of the Internal Processor Registers in the registers window was added in 2.35. A '-' for negate and a '~' operator for bit not were added as valid operators on general purpose registers displayed in the register window, in 2.36. MacVAX was altered to start with virtual memory off and a "Load Boot Image" menu item was added in 2.40. An “Open...” turns on virtual memory and creates page tables in system space. The option of adding a 'p' or 'v' before an address in the goto dialog was also added in 2.40.  AST traps were added in 2.42 along with some new IPR's. Page down, Instruction down etc buttons were added to the existing buttons in the program window.  A new display format along with new responses to clicks, option clicks, cmd clicks etc for the program window were introduced in 2.46 - 2.48. A system window was added in 2.49 to display the PCB and Page tables. The list of unimplemented instructions has been reduced.The DetailsNew Internal Processor RegistersFour new internal were added to aid communications between the simulator and the system running on the simulator.MVCR and MVCS are a pair of registers which provide communications from MacVAX to the VAX system.MVCR 	0x29	The MacVAX Command Register. 	Read Only==============================______________________________==============================Commands from the MacVAX to the VAX system are placed in this register by the MacVAX. The VAX system may only read this register. Currently The following are known commands.NULL_COMMAND		0Ignore the command.NEW_PROCESS			1This is sent when the user selects the Load Process menu item.KILL_PROCESS			2This is sent when the user selects the Terminate Process menu item.RESET_PROCESS		3This is sent when the user selects the Reset Process menu item.SHUTDOWN_SYS		4This is sent when the user selects the Shutdown System menu item.MVCS 	0x30	The MacVAX Command Status Register	Read/Write==============================______________________________==============================E = ERR or error bit. 	 (set by hardware, write clears)	I = INT or interrupt bit.  (set by hardware, write clears)IE = INT_ENB or interrupt enabled bit	(read/write)The MVCS is a read/write register that contains control and status information for the MacVAX / System interface.  If  the MVCS interrupt enable  bit is set by software, an interrupt, at IPL 23 through vector V_MACVAX SCBB+0xE0, is generated when INT  becomes set.  If INT  is already set and the software sets the interrupt enable  bit, an interrupt is generated. The error  bit is set if the INT   bit was set when MacVAX put a command in the  MVCR (ie. on overflow). The INT   and error   bits must be cleared, by the interrupt service routine, by writing a 1 to the bits with a mtpr instruction (don’t forget to set the IE bit as writing a 0 will clear this bit).MVPID	0x31	The MacVAX  Process ID				Read/Write==============================______________________________==============================The MVPID holds a process identifier used by MacVAX to match the current P0 process with its symbol table. The process identifier is obtained by using a new xfc, CREATE_SYS_SYMBOL_TABLE (see New XFC’s). The running system may change the current process identifier by writing to the MVPID register with a mtpr or through a new xfc, USE_USER_SYMBOL_TABLE. A svpctx will save the contents of this register in the long following the PCB (offset of PCB_PID 	0x60) if a system is running on MacVAX. A ldpctx will restore the contents of the MVPID from the long following the PCB again if a system is running on MacVAX. MacVAX only knows a system is running if an xfc #SYSTEM has been made by the running system.MVMEM	0x32	The MacVAX  Memory				Read Only==============================______________________________==============================The MVMEM is a read only register holding the number of bytes of  VAX Physical memory allocated by MacVAX at startup. This figure cannot be changed by the user.MCESR	0x26	Machine Check Error Summary Register	Read/Write==============================______________________________==============================The MCESR logs information about causes of a machine check fault. Currently the only thing that will cause a machine check fault on MacVax is a read or write to a non-existent Physical memory location. This will generate a bus error and set bit 3 of the register. The MCSR register holds further details of the bus error. I believe a real VAX may only generate a bus error on a read and not on a write. Writing a 1 to the Bus Error bit clears it. It will also clear bits 0 to 3 of the  MCSR.MCSR	0x17	Machine Check Status Register			Read Only==============================______________________________==============================The MCSR provides additional information about bus errors and translation buffer errors which caused a machine check fault. As the only cause of a machine check fault on MacVAX is a bus error caused by an access to a non-existent physical memory location only bit 3 of this register will be set. It is cleared when the bus error bit of the MCESR is cleared.ASTR		0x13	Async Trap level					Read/Write==============================______________________________============================== The ASTR holds the value of the most privileged access mode for which an AST is pending. Only bits 0 to 2 are used. The top bits are ignored on a write and returned as 0 on a read. AST’s are serviced on a rei instruction. The register is initialised at boot time to 0x4 (ie No AST pending).New VectorA new Vector V_MACVAX at SCBB + 0xE0 (A Reserved to Customer or Computer Special Systems Vector) has be added for use with the MVCR and MVCS Internal processor registers. Interrupts through this vector will occur at IPL 23.Memory FaultsThere are three faults which may occur when accessing memory. They are “Translation not Valid”, “Access Control Violation” and “Machine Check”.The “Translation not Valid” occurs when a read or write is attempted to a virtual address on a page marked as invalid. The “Access Control Violation” occurs if the current mode of the process prohibits reading or writing of the virtual addresses page or if the page is beyond the end of the page table ( a ”Length Violation”).If both a  “Translation not Valid” and an “Access Control Violation” occur the “Access Control Violation” fault takes precedence.Both  “Translation not Valid” and  “Access Control Violation”  push the processor status longword, the PC of the faulting instruction, the virtual address that caused the fault and a long word to describe the fault. A 1 in bit 0 of this long word indicates a length violation. Bit 1 is set to indicate the violation occurred during the reference to the page table associated with the virtual address and bit 2 is set for write and clear for read.The third fault, a  “Machine Check”, occurs if the physical address being accessed is invalid.  This fault pushes the physical address and a 1 (to indicate 1 parameter).New XFC’sTwo new sets of xfc’s were added. The first are an extension to the existing user xfc’s and a second set are a new class of xfc which are available only to kernel mode processes.Several of these new calls use a pointer to filename structure as a parameter. A filename structure is a VAX word, to hold a directory reference number, followed by a pascal string for the filename. ie.	struct	{		word directory_refnum;		pascal_string filename;	}New User Mode XFC’sXFC 29 (OPEN_NAMED_FILE)OPEN_NAMED_FILE opens a file given its name and directory reference number. The directory reference  number can be obtained from one of GET_CDIR_ID, GET_ADIR_ID, GET_DIR_ID, GET_FILENAME or the FIND_FILE xfc’s. A pointer to a block of VAX memory containing the directory reference in the first word and the filename (as a pascal string) following the first word is passed in R1. A file descriptor is returned in R0. A value of 0 in  R0 indicates an error occurred while trying to open the file.XFC 30 (GET_FILENAME_FD)GET_FILENAME returns the directory reference number and name of an open file associated with the given file descriptor. The file descriptor of open file is passed in R0 and a A pointer to a block of VAX memory to hold the directory reference ( placed  in the first word and the filename (as a pascal string) following the first word is passed) should be passed in R1. XFC 31 (FIND_FILE)FIND_FILE displays a Standard Macintosh File Dialog Box. The user selects a file and the directory reference number and name of the selected file are returned in the Filename structure pointed to by R1.R0 contains a 0 if the user selected a file and -1 if they cancelled.XFC 32 (GET_DIR_ID)GET_DIR_ID  is currently unimplemented. GET_DIR_ID  returns the directory reference number of the directory passed as a pascal string pointer in R1. The directory reference numberis returned in R0. XFC 33 (GET_ADIR_ID)GET_ADIR_ID returns the directory reference number of MacVAX’s directory (ie the folder the MacVAX application was launched from).This might be useful to boot code wishing to open a file in the MacVAX folder. The reference number is returned in R0.XFC 34 (GET_CDIR_ID)GET_CDIR_ID  returns the directory reference number of the last folder a file was opened in. The reference number is returned in R0.New SYSTEM ONLY XFC’sXFC 128 (SYSTEM)The SYSTEM xfc tells MacVAX that an operating system is present. If this call is not made then the following SYSTEM XFC’s will generate a “Reserved or Privileged Instruction” fault. Once this call is made the operating system accepts responsibility for handling the  "Load Process", "Terminate Process", "Shutdown System" and "Reset Process" menu items.  It also alters the behaviour of the load and save process context instructions so they load and save the MVPID IPR from or to the long word immediately following the PCB.XFC 129 (REBOOT)REBOOT is exactly he same as selecting “Load Boot Image” from File menu. XFC 130 (CREATE_USER_SYMBOL_TABLE)CREATE_USER_SYMBOL_TABLE tells MacVAX to read and process the symbol table for the file specified by the File Descriptor passed in R0. MacVAX builds a memory copy of the symbol table and returns a process descriptor to the VAX system in R1. This process descriptor should be stored in the long word following the PCB for the process associated with the file descriptor which was passed to MacVAX. If an error occurred while reading the symbol table an error code (a negative number) will be returned in R1 instead of the process descriptor. This value should also be stored at the end of the PCB if the system intends to continue with the process given no symbol table info will be available for it. XFC 131 (CREATE_SYS_SYMBOL_TABLE)CREATE_SYS_SYMBOL_TABLE  tells MacVAX to read and process the symbol table for the file specified by the File Descriptor passed in R0. MacVAX builds a memory copy of the symbol table and returns a process descriptor to the VAX system in R1. The process descriptor return will always be 0 ( the system symbol table) unless an error occurred while reading or processing the symbol table.  If an error occurred while reading the symbol table an error code (a negative number) will be returned in R1 instead of the process descriptor. CREATE_SYS_SYMBOL_TABLE  differs from CREATE_USER_SYMBOL_TABLE in that the return process descriptor is always 0 and need not be saved by the VAX system and the symbol table will be used immediately for S space. XFC 132 (FREE_SYMBOL_TABLE) FREE_SYMBOL_TABLE  tells MACVAX to forget the symbol table info for the process specified by the Process descriptor in R0. The memory taken by the symbol table is freed. If the  Process descriptor is that of the current P0 process it will loose all displayed symbol table information. A result code of 0 is returned in R1 if the process descriptor was valid or -1 if it was invalid. XFC 133 (USE_USER_SYMBOL_TABLE) USE_USER_SYMBOL_TABLE  Tells MACVAX to use the symbol table info specified by the Process descriptor in R0 for P0 and P1 symbols. A result code of 0 is returned in R1 if the process descriptor was valid or -1 if it was invalid. This is equivalent to a mtpr #MVPID except the mtpr does not produces a result code. Both this call and the mtpr should not normally be needed as the ldpctx and svpctx calls will load and save the IPR MVPID.XFC 134 (GET_FILENAME_PD)GET_FILENAME_PD returns the directory reference number and the name of the file associated with the process descriptor passed in R0. It allows a VAX system to easily reopen the file when reseting the process when the user selects the Reset Process menu item. The directory reference number and the name of the file are written to the VAX virtual memory location specified by R1 in the form of a filename structure as described above.XFC 134 (DISPLAY_DIALOG)DISPLAY_DIALOG displays the pascal string pointed to by R0 in a dialog box.There is no return code.	Current Implementation limitationsThe As assembler is based largely on the VMS macro assembler The two differ in some details:1.	The As assembler does not support macros.2.	As accepts some of the syntax of the Ultrix as assembler  For example, C style 	comments and the use of “$” to indicate an immediate operand, and “*” to 	indicate indirection.  3.	As does not support VMS style local labels.4.	There is a bug in As which sometimes causes it not to recognise 	expressions of the form expr operator expr unless there are spaces 	between the expressions and the operator.5.	The UNIX .text directive may be used in place of the VMS .code directive.The MacVAX simulator provides a large subset of the VAX architecture.  The following set of instructions which are unimplemented in this version of the simulator are:1.	All instructions to do with type D, G and H floating point 	data, e.g. movd, cvtld etc.2.	All packed decimal instructions, e.g. movp, cmpp3 etc.3.	The queue instructions, insqhi, insqti, remqhi and remqti4.	The F instructions emodf and cvtrfl.5.	The extended arithmetic instruction ediv.6.	The following character string instructions, movtc, movtuc, 	cmpc3, cmpc5, scanc, spanc, and matchc.7.	The special function instruction crc.8.	PSW bits IV, DV, FU are ignored.9.	Faults do not restore incremented or decremented registers to their old values.10.	Floating point traps and faults do not fault through the vector.13.	Translation buffer registers Do not exist.14.	FPD. String instructions are not interruptible.15	Watch Points are not checked for during address translation.