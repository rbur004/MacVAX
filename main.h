#ifndef __MAIN_H_#define __MAIN_H_#ifndef		FALSE#define     FALSE   0#endif#ifndef		TRUE#define     TRUE    -1#endif/* * Resource ID constants. */#define	appleMenuid		128			 #define	appleMenu 		0			/* MyMenus[] array indexes */#define	aboutMeCommand	1#define	fileMenuid		129#define	fileMenu 		1 #define openCommand		1#define closeCommand	2/*-*/#define InitCommand		4#define bootCommand		5#define binCommand		6#define shutdownCommand	7/*-*/#define saveIO			9/*-*/#define savestatecommand 11#define restorestatecommand	12/*-*/#define	quitCommand 	14#define	editMenuid		130#define	editMenu		2#define	undoCommand 	1/*-*/#define	cutCommand		3#define	copyCommand 	4#define	pasteCommand	5#define runMenuid				131#define runMenu					3#define	resetCommand 			1/*-*/#define	goCommand				3#define	stepstepCommand 		4#define	stepCommand				5#define	PauseCommand			6/*-7*/#define	watchCommand 			8#define	ClearAllWatchCommand 	9#define	STOPonREADcommand		10#define	STOPonWRITEcommand 		11/*-12*/#define display_sizes			13#define windowsMenuid	132#define windowsMenu		 4#define programCommand	 1#define registersCommand 2#define lmemoryCommand	 3#define ioCommand		 4#define memdumpCommand	 5#define physmemCommand	 6#define syswCommand		 7#define stackwCommand	 8/*-9*/#define CLEARIOW		10/*-11*/#define POINT9COMMAND	12#define POINT12COMMAND	13#define POINT14COMMAND	14#define POINT18COMMAND	15/*-16*/#define BOLDCOMMAND		17#define PLAINCOMMAND	18/*-19*/#define COURIERCOM		20#define MONACOCOM		21#define optionMenuid		133#define optionMenu			5#define hexaddrCommand		1#define symmodeCommand		2/*-*/#define DisplayHexCommand	4#define DisplaydecCommand	5#define DisplayudecCommand	6#define DisplayasciiCommand	7#define DisplayfloatCommand	8/*-*/#define IgnoreModeCommand	10#define ToMenuid		134#define ToMenu			6#define TOaddress			1/*-*/#define CodeStartCommand	3	/*if this changes change activate_physmem_window()*/#define DataStartCommand	4#define PCCommand			5#define SPCommand			6#define FPCommand			7#define APCommand			8#define USPCommand			9#define SSPCommand			10#define ESPCommand			11#define KSPCommand			12#define ISPCommand			13#define SCBBCommand			14#define P0BRCommand			15#define P1BRCommand			16#define SBRCommand			17#define PCBBCommand			18	/*if this changes change activate_physmem_window()*/#define TransferMenuid		135#define TransferMenu		7#define	assembler		 	1#define	Edit				2#define	Qued				3/*-*/#define Other				5#define menuCount		8#ifdef __MAIN_C_short menuids[] = {	appleMenuid,	fileMenuid,	editMenuid,	runMenuid,	windowsMenuid,	optionMenuid,	ToMenuid,	TransferMenuid,};MenuHandle	MyMenus[menuCount]; 	/* The menu handles */Boolean 		DoneFlag;				/* Becomes TRUE when File/Quit chosen */short 			appl_fd;short 			appl_vrefnum;#else __MAIN_C_extern short 		menuids[];extern MenuHandle	MyMenus[]; 	/* The menu handles */extern short 		appl_fd;extern short 		appl_vrefnum;#endif __MAIN_C_#define	aboutMeDLOG		128/* * C programs typically use macros for simple expressions which * must be function calls in Pascal.  Here are a couple of examples: *//* * Inline SetRect() macro, efficient when (rectp) is a constant. * Must not be used if (rectp) has side effects. * * We could do an InsetRect() macro in a similar vein. */#define SETRECT(rectp, _left, _top, _right, _bottom)	\	(rectp)->left = (_left), (rectp)->top = (_top), 	\	(rectp)->right = (_right), (rectp)->bottom = (_bottom)/* * HIWORD and LOWORD macros, for readability. */#define HIWORD(aLong)		(((aLong) >> 16) & 0xFFFF)#define LOWORD(aLong)		((aLong) & 0xFFFF)/*Functions*/void setupMenus(void);void showAboutMeDialog(void);void appleDA (	long theItem);void Transfer(	long theItem);void doCommand(	long	mResult,	long opt_key_down);void cleanup(void);void quit(void);#endif __MAIN_H_