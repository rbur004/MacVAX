/*Forward declaration of functions*/ /*Each of these fncs are used in instrs.h*//*each define is a pointer to either a dummy fuction indicating that that instruction *//*has not yet been implemented*//*or is a pointer to the function that will implement that instruction*/#ifndef FUNC_H#define FUNC_Hvoid unimplemented(char *);void Subset_emulation(char *);void  acbb(char *);#define acbd unimplementedvoid  acbf(char *);void  acbl(char *);void  acbw(char *);void  adawi(char *);void  addb2(char *);void  addb3(char *);#define addd2 unimplemented#define addd3 unimplementedvoid  addf2(char *);void  addf3(char *);void  addl2(char *);void  addl3(char *);#define addp4 Subset_emulation#define addp6 Subset_emulationvoid  addw2(char *);void  addw3(char *);void  adwc(char *);void  aobleq(char *);void  aoblss(char *);void  ashl(char *);#define ashp Subset_emulationvoid  ashq(char *);void  bbc(char *);void  bbcc(char *);void  bbcci(char *);void  bbcs(char *);void  bbs(char *);void  bbsc(char *);void  bbss(char *);void  bbssi(char *);void  bcc(char *);void  bcs(char *);void  beql(char *);void  beqlu(char *);void  bgeq(char *);void  bgequ(char *);void  bgtr(char *);void  bgtru(char *);void  bicb2(char *);void  bicb3(char *);void  bicl2(char *);void  bicl3(char *);void  bicpsw(char *);void  bicw2(char *);void  bicw3(char *);void  bisb2(char *);void  bisb3(char *);void  bisl2(char *);void  bisl3(char *);void  bispsw(char *);void  bisw2(char *);void  bisw3(char *);void  bitb(char *);void  bitl(char *);void  bitw(char *);void  blbs(char *);void  blbc(char *);void  bleq(char *);void  blequ(char *);void  blss(char *);void  blssu(char *);void  bneq(char *);void  bnequ(char *);void  bpt(char *);void  brb(char *);void  brw(char *);#define bsbb jsb#define bsbw jsbvoid  bvc(char *);void  bvs(char *);void  callg(char *);void  calls(char *);void caseb(char *);void casel(char *);void casew(char *);void  casex(char *);void chme(char *);void chmk(char *);void chms(char *);void chmu(char *);void  clrb(char *);#define  clrd	clrq#define  clrf	clrlvoid  clrl(char *);void  clrq(char *);void  clrw(char *);void  cmpb(char *);#define cmpc3 Subset_emulation#define cmpc5 Subset_emulation#define cmpd unimplementedvoid  cmpf(char *);void  cmpl(char *);#define cmpp3 Subset_emulation#define cmpp4 Subset_emulationvoid cmpq(char *);void cmpv(char *);void  cmpw(char *);void cmpzv(char *);#define crc Subset_emulation#define cvtbd unimplementedvoid  cvtbf(char *);void  cvtbl(char *);void  cvtbw(char *);#define cvtdb unimplemented#define cvtdf unimplemented#define cvtdl unimplemented#define cvtdw unimplementedvoid cvtfb(char *);#define cvtfd unimplementedvoid cvtfl(char *);void cvtfw(char *);void  cvtlb(char *);#define cvtld unimplementedvoid  cvtlf(char *);#define cvtlp Subset_emulationvoid  cvtlw(char *);#define cvtpl Subset_emulation#define cvttp Subset_emulation#define cvtpt Subset_emulation#define cvtps Subset_emulation#define cvtrdl unimplementedvoid cvtrfl(char *);#define cvtsp Subset_emulationvoid  cvtwb(char *);#define cvtwd unimplementedvoid  cvtwf(char *);void  cvtwl(char *);void  decb(char *);void  decl(char *);void  decw(char *);void  divb2(char *);void  divb3(char *);#define divd2 unimplemented#define divd3 unimplementedvoid  divf2(char *);void  divf3(char *);void  divl2(char *);void  divl3(char *);#define divp Subset_emulationvoid  divw2(char *);void  divw3(char *);#define editpc Subset_emulation#define ediv unimplemented#define emodd unimplemented#define emodf unimplementedvoid emul(char *);void extv(char *);void extzv(char *);void ffc(char *);void ffs(char *);void  halt(char *);void  incb(char *);void  incl(char *);void  incw(char *);void index(char *);#define insqhi unimplemented#define insqti unimplementedvoid insque(char *);void insv(char *);void  jmp(char *);void  jsb(char *);void ldpctx(char *);void locc(char *);#define matchc Subset_emulationvoid  mcomb(char *);void  mcoml(char *);void  mcomw(char *);void  mfpr(char *);void  mnegb(char *);#define mnegd unimplementedvoid  mnegf(char *);void  mnegl(char *);void  mnegw(char *);#define movab movax#define movad movax#define movaf movax#define moval movax#define movaq movax#define movaw movaxvoid  movax(char *);void  movb(char *);void movc3(char *);void movc5(char *);#define  movd unimplementedvoid  movd(char *);void  movf(char *);void  movl(char *);#define movp Subset_emulationvoid  movpsl(char *);void  movq(char *);#define movtc Subset_emulation#define movtuc Subset_emulationvoid  movw(char *);void  movzbl(char *);void  movzbw(char *);void  movzwl(char *);void  mtpr(char *);void  mulb2(char *);void  mulb3(char *);#define muld2 unimplemented#define muld3 unimplementedvoid  mulf2(char *);void  mulf3(char *);void  mull2(char *);void  mull3(char *);#define mulp Subset_emulationvoid  mulw2(char *);void  mulw3(char *);void  nop(char *);#define polyd unimplementedvoid polyf(char *);void  popr(char *);void  prober(char *);void  probew(char *);#define pushab pusha#define pushad pusha#define pushaf pusha#define pushal pusha#define pushaq pusha#define pushaw pushavoid  pusha(char *);void  pushl(char *);void  pushr(char *);void  rei(char *);#define remqhi unimplemented#define remqti unimplementedvoid  remque(char *);void  ret(char *);void  rotl(char *);void  rsb(char *);void  sbwc(char *);#define scanc Subset_emulationvoid  skpc(char *);void  sobgeq(char *);void  sobgtr(char *);#define spanc Subset_emulationvoid  subb2(char *);void  subb3(char *);#define subd2 unimplemented#define subd3 unimplementedvoid  subf2(char *);void  subf3(char *);void  subl2(char *);void  subl3(char *);#define subp4 Subset_emulation#define subp6 Subset_emulationvoid  subw2(char *);void  subw3(char *);void svpctx(char *);void  tstb(char *);#define tstd unimplementedvoid  tstf(char *);void  tstl(char *);void  tstw(char *);void  xfc(char *);void  xorb2(char *);void  xorb3(char *);void  xorl2(char *);void  xorl3(char *);void  xorw2(char *);void  xorw3(char *);#define escd reserved_or_priviledged#define esce reserved_or_priviledged#define escf reserved_or_priviledged#endif