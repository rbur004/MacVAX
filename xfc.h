#ifndef XFC_H#define XFC_H#define READCHAR	0	/*reads char from keyboard into R0*/#define WRITECHAR	1	/*writes char to iow from R0*/#define READLINE	2	/*Reads a line from keyboard into *R0*/						/*Leaves the length in R1 , R0 += R1*/						/*echo and backspace and cmd . */#define WRITESTRING	3	/*Write a line to iow from *R0 */						/*for R1 chars or a until a null byte*/						/*R0 += numb bytes written */#define AHTOI		4	/*converts Hex number at *R0 to long in R1*/						/*R0 += numb of valid hex chars */#define ADTOI		5	/*converts Dec number at *R0 to long in R1*/						/*R0 += numb of valid Dec chars */#define ITOAH		6	/*converts long in R1 to hex string at *R0*/						/*R0 += numb of valid hex chars */#define ITOAD		7	/*converts long in R1 to dec string at *R0*/						/*R0 += numb of valid Dec chars */#define OPEN_MAC_FILE	8	#define CREATE_MAC_FILE	9#define CLOSE_MAC_FILE	10#define READ_MAC_FILE	11#define WRITE_MAC_FILE	12#define SEEK_MAC_FILE	13#define UPDATE_WINDOWS	14	/*causes all windows to be updated*//*these bring the window to the front opening them if need be*/#define PROG_TO_FRONT	15	#define REG_TO_FRONT	16	#define MEML_TO_FRONT	17#define IO_TO_FRONT		18#define MEM_TO_FRONT	19/*these close the window*/#define PROG_CLOSE		20#define REG_CLOSE		21#define MEML_CLOSE		22#define IO_CLOSE		23#define MEM_CLOSE		24#define ALLOC_MEM		25	/*R0 <- pointer , allocs 1 page */#define FREE_MEM		26	/*frees last page */#define CLEAR_IOW		27	#define MAC_TIME		28	/*returns time in seconds R0*/#define OPEN_NAMED_FILE	29	/*takes a filename struct pointer in R1*/						  	/*returns the fd in R0*/#define GET_FILENAME_FD	30	/*R0 -> filedescriptor of open file*/						  	/*R1 -> Destination for filename struct*/						  	/* struct is a word for the volume reference number */						  	/*followed by the filename as a pascal string */#define FIND_FILE		31	/*returns 0 if it suceeded -1 if failed in R0*/							/*Takes address to write VRefNum and Filename in R1*/#define GET_DIR_ID		32  /*Takes a pascal string pointer in R1 and */							/*returns the mac directory id (vrefnum) in R0*/#define GET_ADIR_ID		33	/*returns the applications mac directory id (vrefnum) in R0*/#define GET_CDIR_ID		34	/*returns the current mac directory id (vrefnum) in R0*//*these bring the window to the front opening them if need be*/#define SYSW_TO_FRONT	35#define STACKW_TO_FRONT	36/*these close the window*/#define SYSW_CLOSE		37#define STACKW_CLOSE	38/*System only XFC's*/#define SYSTEM						128 /*A system is running and accepts responsibility for everything*/#define REBOOT						129 /*Same as selecting Boot for File menu*/#define CREATE_USER_SYMBOL_TABLE 	130 /*File descriptor in R0. Returns Process descriptor in R1.*/										/*Create a symbol table for this file and return a descriptor*/#define CREATE_SYS_SYMBOL_TABLE		131 /*File descriptor in R0. Returns Process descriptor in R1.*/										/*Create a symbol table for this file and attach it to S space*/#define FREE_SYMBOL_TABLE			132 /*Process descriptor in R0. Returns result code in R1.*/										/*Tells MACVAX to forget the symbol table info for this prog*/#define USE_USER_SYMBOL_TABLE		133	/*Process descriptor in R0. Returns result code in R1.*/										/*Tells MACVAX to use the symbol table info for P0 and P1 symbols*/#define GET_FILENAME_PD				134 /*R0 -> Process descriptor of open file*/						  				/*R1 -> Destination for filename struct*/						  				/* struct is a word for the volume reference number */						  				/*followed by the filename as a pascal string */#define	DISPLAY_DIALOG				135 /*display a dialog box with the message string pointed to by R0*/#define	CLEAR_WATCHPOINTS			136 /* Virtual addr -> R0, length -> R1  */#define	SET_WATCHPOINTS				137 /* Virtual addr -> R0, length -> R1  */#define DUP_USER_SYMBOL_TABLE		138	/*Process descriptor in R0. Returns a new process descriptor in R1.*/										/*Tells MACVAX to use the symbol table info for P0 and P1 symbols*/										/*by copying references from an existing process descriptor */#endif XFC_H