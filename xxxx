void ldpctx(char * notused){#pragma unused(notused)unsigned long tmp;	if(CMD != KSP)	{		reserved_or_priviledged("ldpctx");		return;	}	IPR(KSP) = vax_fetchliR(IPR(PCBB) + PCB_KSP);	IPR(ESP) = vax_fetchliR(IPR(PCBB) + PCB_ESP);	IPR(SSP) = vax_fetchliR(IPR(PCBB) + PCB_SSP);	IPR(USP) = vax_fetchliR(IPR(PCBB) + PCB_USP);	R0 = vax_fetchliR(IPR(PCBB) + PCB_R0);	R1 = vax_fetchliR(IPR(PCBB) + PCB_R1);	R2 = vax_fetchliR(IPR(PCBB) + PCB_R2);	R3 = vax_fetchliR(IPR(PCBB) + PCB_R3);	R4 = vax_fetchliR(IPR(PCBB) + PCB_R4);	R5 = vax_fetchliR(IPR(PCBB) + PCB_R5);	R6 = vax_fetchliR(IPR(PCBB) + PCB_R6);	R7 = vax_fetchliR(IPR(PCBB) + PCB_R7);	R8 = vax_fetchliR(IPR(PCBB) + PCB_R8);	R9 = vax_fetchliR(IPR(PCBB) + PCB_R9);	R10 = vax_fetchliR(IPR(PCBB) + PCB_R10);	R11 = vax_fetchliR(IPR(PCBB) + PCB_R11);	R12 = vax_fetchliR(IPR(PCBB) + PCB_R12);	R13 = vax_fetchliR(IPR(PCBB) + PCB_R13);	tmp = vax_fetchliR(IPR(PCBB) + PCB_P0BR);	if((tmp & S_SPACE) == S_SPACE 	/*in system space*/		&& (!(tmp & 0x3)) 			/*Aligned*/			&& (!((unsigned long) tmp >= ((IPR(SLR) << 9) + S_SPACE))) /*Not off of the  end of defined sys space*/	  )		{		IPR(P0BR) = tmp;				tmp = (unsigned long) vax_fetchliR(IPR(PCBB) + PCB_P0LR);		IPR(P0LR) = tmp & PAGE_LENGTH_MASK;		IPR(ASTR) = (tmp >> 24 )  & 0x7;		cdlines();				tmp = vax_fetchliR(IPR(PCBB) + PCB_P1BR);		if(((unsigned long)tmp >= (unsigned)0x7f800000) /*Vaild address base for P1BR*/		&& (tmp & R_SPACE) != R_SPACE					/*Not in R Space*/		&& (!(tmp & 0x3))								/*Aligned*/		&& (!(((unsigned long)tmp + MAX_PAGE_TABLE_SIZE) >= ((IPR(SLR) << 9) + S_SPACE))) /*not beyond defined sys space*/	 	  )		{			IPR(P1BR) = tmp;						tmp = vax_fetchliR(IPR(PCBB) + PCB_P1LR) ;			IPR(P1LR) = tmp & PAGE_LENGTH_MASK;			IPR(PMR) = ((tmp & LONG_HI_BIT) != 0);			sklines();		}		else			exception(FAULT,V_RO,"Reserverd Operand Fault",0,0);	}	else		exception(FAULT,V_RO,"Reserverd Operand Fault",0,0);		if(IS)	{	IPR(ISP) = SP;		SP = IPR(KSP);		IS = 0;	}	SP -= 4;	vax_putl(vax_fetchliR(IPR(PCBB) + PCB_PSL),SP);	SP -= 4;	vax_putl(vax_fetchliR(IPR(PCBB) + PCB_R15),SP);}